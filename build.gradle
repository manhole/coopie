apply plugin: "java"
apply plugin: 'eclipse'
apply plugin: "maven-publish"

group = "jp.sourceforge.hotchpotch"
version = "0.2.2-SNAPSHOT"
sourceCompatibility = "1.6"

def sourceEncoding = "UTF-8"
compileJava.options.encoding = sourceEncoding
compileTestJava.options.encoding = sourceEncoding

repositories {
    mavenCentral()
    mavenRepo url: "http://hotchpotch.sourceforge.jp/maven2/release"
}

task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

tasks.withType (Jar).each {
    def p = "git rev-parse --verify --short=8 HEAD".execute()
    def w = new java.io.StringWriter()
    p.waitForProcessOutput(w, System.err)
    //println "exitValue=${p.exitValue()}"
    if (p.exitValue() != 0) {
        throw new Exception()
    }
    def buildNumber = w.toString().trim()
    w.close()

    it.manifest.attributes["Archiver-Version"] = "Gradle ${gradle.gradleVersion}"
    it.manifest.attributes["Created-By"] = "Gradle"
    it.manifest.attributes["Built-By"] = "${System.getProperty("user.name")}"
    it.manifest.attributes["Build-Jdk"] = "${System.getProperty("java.version")} (${System.getProperty("java.vm.vendor")} ${System.getProperty("java.vm.version")})"
    it.manifest.attributes["Implementation-Title"] = project.name
    it.manifest.attributes["Implementation-Version"] = project.version
    it.manifest.attributes["Implementation-Vendor-Id"] = project.group
    it.manifest.attributes["Built-Timestamp"] = new java.text.SimpleDateFormat("yyyy/MM/dd HH:mm:ss.SSS Z (z)").format(new Date())
    it.manifest.attributes["SCM-Revision"] = buildNumber
}

def versions = [slf4j: "1.6.1", logback: "0.9.24"]

dependencies {
    compile ("org.t2framework.commons:commons:0.6.7-ga") {
        exclude group: "ch.qos.logback", module: "logback-core"
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    compile ("org.slf4j:slf4j-api:${versions.slf4j}")
    compile ("ch.qos.logback:logback-core:${versions.logback}")
    compile ("ch.qos.logback:logback-classic:${versions.logback}")
    compile ("org.apache.poi:poi:3.1-FINAL") {
        exclude group: "avalon-framework", module: "avalon-framework"
        exclude group: "log4j", module: "log4j"
    }
    testCompile ("junit:junit-dep:4.10")
    testCompile ("org.hamcrest:hamcrest-core:1.2.1")
    testCompile ("org.hamcrest:hamcrest-library:1.2.1")
    testCompile ("junit-addons:junit-addons:1.4") {
        exclude group: "xerces", module: "xercesImpl"
        exclude group: "xerces", module: "xmlParserAPIs"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar
            pom.withXml {
                /*
                 * "maven-publish"が用意する<dependencies>を破棄して、作り変える。
                 * 1. compile scopeがruntimeになってしまう。
                 * 2. optionalを指定できない。
                 * 3. excludeを指定できない。
                 */
                def NodeList children = asNode().children()
                _findAll(children) { node ->
                    node.name().localPart != "dependencies"
                }
                children.last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    name project.name
                    packaging "jar"
                    url "https://github.com/manhole/coopie"
                    scm {
                        connection "scm:git:git@github.com:manhole/coopie.git"
                        developerConnection "scm:git:git@github.com:manhole/coopie.git"
                        url "https://github.com/manhole/coopie"
                    }
                    dependencies {
                        ["compile":"compile", "testCompile":"test"].each { configName, scopeValue ->
                            project.configurations[configName].dependencies.each { dep ->
                                dependency {
                                    groupId dep.group
                                    artifactId dep.name
                                    version dep.version
                                    scope scopeValue
                                    if ("poi" == dep.name) {
                                        optional true
                                    }
                                    if (dep.excludeRules) {
                                        exclusions {
                                            dep.excludeRules.each { excludeRule ->
                                                exclusion {
                                                    groupId excludeRule.group
                                                    artifactId excludeRule.module
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        if (!project.version.endsWith("-SNAPSHOT")) {
            maven {
                name "coopieLocal"
                url "file:../site/maven2/release"
            }
        }
    }
}

def _findAll(Collection items, Closure block) {
    def founds = items.findAll(block)
    items.clear()
    items.addAll(founds)
}
